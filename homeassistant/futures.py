"""Loop future tracking for Home Assistant."""

import concurrent.futures
import threading
from typing import Any, Set

# Store all futures generated by run_callback_threadsafe so
# we know to cancel them before the we shutdown the executor
# to avoid a deadlock where the future `result()` is waiting
# on a `threading.Condition` and `executor.shutdown` can't
# `join()` because it would deadlock.
LOOP_PENDING_FUTURES: Set[Any] = set()
LOOP_STOPPING = threading.Event()


def stop_loop() -> None:
    """Set when the loop is being closed."""
    LOOP_STOPPING.set()
    for future in LOOP_PENDING_FUTURES:
        future.cancel()


def loop_is_stopping() -> bool:
    """Check if the loop is stopping."""
    return LOOP_STOPPING.is_set()


def create() -> None:
    """Create and track a future tracked."""
    future: concurrent.futures.Future = concurrent.futures.Future()
    LOOP_PENDING_FUTURES.add(future)


def done(future: Any) -> None:
    """Remove a completed from being tracked."""
    LOOP_PENDING_FUTURES.remove(future)
